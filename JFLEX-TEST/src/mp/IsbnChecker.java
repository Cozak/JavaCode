package mp;

import java.io.FileOutputStream;
import java.io.PrintStream;

/* The following code was generated by JFlex 1.6.0 */

/**
 ** Code by ZAK
 **/

class Yytoken {
	private String lG = null;
	private String pNum = null;
	public Yytoken(String lg, String pn) {
		this.lG = lg;
		this.pNum = pn;
	}
	@Override
	public String toString() {
		return this.lG+" "+this.pNum;
	}
}

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>NISBN.flex</tt>
 */
class IsbnChecker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\2\2\0\1\1\22\0\1\5\14\0\1\5\2\0\7\12"+
    "\1\7\1\10\1\6\36\0\1\11\43\0\1\3\u05e3\0\12\4\206\0"+
    "\12\4\306\0\12\4\u019c\0\12\4\166\0\12\4\166\0\12\4\166\0"+
    "\12\4\166\0\12\4\166\0\12\4\166\0\12\4\166\0\12\4\166\0"+
    "\12\4\166\0\12\4\140\0\12\4\166\0\12\4\106\0\12\4\u0116\0"+
    "\12\4\106\0\12\4\u0746\0\12\4\46\0\12\4\u012c\0\12\4\200\0"+
    "\12\4\246\0\12\4\6\0\12\4\266\0\12\4\126\0\12\4\206\0"+
    "\12\4\6\0\12\4\u89c6\0\12\4\u02a6\0\12\4\46\0\12\4\306\0"+
    "\12\4\26\0\12\4\126\0\12\4\u0196\0\12\4\u5316\0\12\4\u0586\0"+
    "\12\4\u0bbc\0\12\4\200\0\12\4\74\0\12\4\220\0\12\4\u0116\0"+
    "\12\4\u01d6\0\12\4\u0176\0\12\4\146\0\12\4\u0216\0\12\4\u5176\0"+
    "\12\4\346\0\12\4\u6c74\0\62\4\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u280f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\27\1\1\3\14\1\1\3\6\1"+
    "\1\4\6\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[54];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\13\0\26\0\41\0\54\0\67\0\102\0\115"+
    "\0\130\0\143\0\156\0\171\0\204\0\217\0\232\0\245"+
    "\0\260\0\273\0\306\0\321\0\334\0\347\0\362\0\375"+
    "\0\u0108\0\u0113\0\u011e\0\13\0\u0129\0\u0134\0\u013f\0\u014a"+
    "\0\u0155\0\u0160\0\u016b\0\u0176\0\u0181\0\u018c\0\u0197\0\u01a2"+
    "\0\u01a2\0\u01ad\0\u01b8\0\u01c3\0\u01ce\0\u01d9\0\u01e4\0\13"+
    "\0\u01ef\0\u01fa\0\u0205\0\u0210\0\u021b\0\u0226";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[54];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\5\1\2\1\6\2\5"+
    "\1\2\1\5\1\2\3\0\7\2\2\0\1\4\23\0"+
    "\1\2\3\0\1\7\1\10\3\7\1\2\1\7\1\2"+
    "\3\0\1\7\1\10\1\7\1\11\1\7\1\2\1\7"+
    "\1\2\3\0\1\12\1\10\3\12\1\2\1\12\1\2"+
    "\3\0\1\13\1\2\3\13\1\2\1\13\1\2\3\0"+
    "\1\12\1\10\1\14\1\12\1\14\1\2\1\12\1\2"+
    "\3\0\1\15\1\10\3\15\1\2\1\15\1\2\3\0"+
    "\1\16\1\17\3\16\1\2\1\16\1\2\3\0\1\15"+
    "\1\20\3\15\1\2\1\15\1\2\3\0\1\21\1\10"+
    "\3\21\1\2\1\21\1\2\3\0\1\22\1\17\3\22"+
    "\1\2\1\22\1\2\3\0\1\23\1\2\3\23\1\2"+
    "\1\23\1\2\3\0\1\24\1\2\3\24\1\2\1\24"+
    "\1\2\3\0\1\2\1\10\6\2\3\0\1\25\1\17"+
    "\3\25\1\2\1\25\1\2\3\0\1\26\1\27\3\26"+
    "\1\2\1\26\1\2\3\0\1\30\1\31\3\30\1\2"+
    "\1\30\1\2\3\0\1\32\1\17\3\32\1\2\1\32"+
    "\1\2\3\0\1\33\1\27\3\33\1\2\1\33\1\2"+
    "\3\0\2\2\5\34\1\2\3\0\1\35\1\31\3\35"+
    "\1\2\1\35\1\2\3\0\1\36\1\2\3\36\1\2"+
    "\1\36\1\2\3\0\1\37\1\17\3\37\1\2\1\37"+
    "\1\2\3\0\1\40\1\27\3\40\1\2\1\40\1\2"+
    "\3\0\1\41\1\31\3\41\1\2\1\41\1\2\3\0"+
    "\1\42\1\43\3\42\1\2\1\42\1\2\3\0\1\44"+
    "\1\17\3\44\1\2\1\44\1\2\3\0\1\45\1\27"+
    "\3\45\1\2\1\45\1\2\3\0\1\46\1\31\3\46"+
    "\1\2\1\46\1\2\3\0\1\47\1\43\3\47\1\2"+
    "\1\47\1\2\3\0\1\50\1\2\3\51\1\34\1\51"+
    "\1\2\3\0\1\2\1\17\6\2\3\0\1\52\1\27"+
    "\3\52\1\2\1\52\1\2\3\0\1\37\1\31\3\37"+
    "\1\2\1\37\1\2\3\0\1\53\1\43\3\53\1\2"+
    "\1\53\1\2\3\0\1\54\1\55\3\54\1\2\1\54"+
    "\1\2\3\0\1\2\1\27\6\2\3\0\1\56\1\43"+
    "\3\56\1\2\1\56\1\2\3\0\1\57\1\55\3\57"+
    "\1\2\1\57\1\2\3\0\1\60\1\2\3\60\1\2"+
    "\1\60\1\2\3\0\1\61\1\43\3\61\1\2\1\61"+
    "\1\2\3\0\1\62\1\55\3\62\1\2\1\62\1\2"+
    "\3\0\1\63\1\43\3\63\1\2\1\63\1\2\3\0"+
    "\1\64\1\55\3\64\1\2\1\64\1\2\3\0\1\2"+
    "\1\65\6\2\3\0\1\66\1\55\3\66\1\2\1\66"+
    "\1\2\3\0\1\50\1\2\3\50\1\2\1\50\1\2"+
    "\3\0\1\2\1\55\5\2";

  private static int [] zzUnpackTrans() {
    int [] result = new int[561];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\11\62\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[54];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	/*
		Push the input value if it has passed
	*/
	private boolean toCheck(String str, int type) {
		int len = 0, sum = 0;
		char tp = '\0';
		if (type == 13) {
			len = str.length();
			for (int i = 0, j = 0, k; i < len-2; ++i) {
				tp = str.charAt(i);
				if (tp != '-' && tp != ' ') {
					k = (j++ % 2 == 0) ? 1 : 3;
					k *= Integer.parseInt(tp+"");
					sum += k;
				}
			}
			sum %= 10;
			sum = (10 - sum)%10;
			return (sum == Integer.parseInt(""+str.charAt(str.length()-1)));
		} else if (type == 10) {
			len = str.length();
			for (int i = 0, j = 0; i < len-2; ++i) {
				tp = str.charAt(i);
				if (tp != '-' && tp != ' ') {
					sum += Integer.parseInt(tp+"")*(10 - j++);
				}
			}
			sum %= 11;
			sum = (11 - sum)%11;
			if (str.charAt(str.length()-1) == 'X') {
				return sum == 10;
			}
			return (sum == Integer.parseInt(""+str.charAt(str.length()-1))); 
		}
		return false;
	}
	
	/* bring back the language and publisher*/
	private String lanG = "";
	private String puB = "";
	private void languageArea(String str, int type) {
		int len = str.length();
		String[] strs = str.split("-| ");
		if (type == 13) {
			this.lanG = whichLanguage(Integer.parseInt(strs[1]));
			this.puB = strs[2];
		} else if (type == 10) {
			this.lanG = whichLanguage(Integer.parseInt(strs[0]));
			this.puB = strs[1];
		}
	}
	
	/* Int to Language */
	private String whichLanguage(int num) {
		switch (num) {
			case 0: {
				return "English";
			}
			case 7: {
				return "Chinese";
			}
			default:;
		}
		return "Other";
	}
	/* Main Function*/
	public static void main(String argv[]) {
		// default input file
		String filename = "input.txt";
		String outputfile = "output.txt";
		if (argv.length == 0) {
			System.out.println("Using default input file: input.txt");
		} else {
			filename = argv[0];
		}
        IsbnChecker scanner = null;
		String encodingName = "UTF-8";
		
        try {
		  PrintStream ps = new PrintStream(new FileOutputStream(outputfile));
		  System.setOut(ps);
          java.io.FileInputStream stream = new java.io.FileInputStream(filename);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new IsbnChecker(reader);
          do {
            System.out.println(scanner.yylex());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+filename+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+filename+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  IsbnChecker(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 262) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return (new Yytoken("Error", ""));
          }
        case 5: break;
        case 2: 
          { 
          }
        case 6: break;
        case 3: 
          { if (yylength() == 13 && toCheck(yytext(), 10)) {
											languageArea(yytext(), 10);
											return (new Yytoken(lanG, puB));
										}
										return (new Yytoken("Error", ""));
          }
        case 7: break;
        case 4: 
          { if (yylength() == 17 && toCheck(yytext(), 13)) {
											languageArea(yytext(), 13);
											return (new Yytoken(lanG, puB));
										}
										return (new Yytoken("Error", ""));
          }
        case 8: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
