package com.dell.prototype.apm.instrumentation;

/**
 * Created with IntelliJ IDEA.
 * User: lliu2
 * Date: 9/3/14
 * Time: 12:15 AM
 * To change this template use File | Settings | File Templates.
 */
public enum MethodId {
    EXECUTE_QUERY_WITH_SQL("executeQuery", "(Ljava/lang/String;)Ljava/sql/ResultSet;", "java.sql.ResultSet executeQuery(String sql) throws java.sql.SQLException {return super.executeQuery($1);}")
    , EXECUTE_UPDATE("executeUpdate", "(Ljava/lang/String;)I", "int executeUpdate(String sql) throws java.sql.SQLException {return super.executeUpdate($1);}")
    , EXECUTE_UPDATE_WITH_SIGNAL("executeUpdate", "(Ljava/lang/String;I)I", "int executeUpdate(String sql, int autoGeneratedKeys) throws java.sql.SQLException {return super.executeUpdate($1, $2);}")
    , EXECUTE_UPDATE_WITH_SIGNALS("executeUpdate", "(Ljava/lang/String;[I)I", "int executeUpdate(String sql, int columnIndexes[]) throws java.sql.SQLException {return super.executeUpdate($1, $2);}")
    , EXECUTE_UPDATE_WITH_SIGNALS_NAME("executeUpdate", "(Ljava/lang/String;[Ljava/lang/String;)I", "int executeUpdate(String sql, String columnNames[]) throws java.sql.SQLException {return super.executeUpdate($1, $2);}")
    , EXECUTE("execute", "(Ljava/lang/String;)Z", "boolean execute(String sql) throws java.sql.SQLException {return super.execute($1);}")
    , EXECUTE_WITH_SIGNAL("execute", "(Ljava/lang/String;I)Z", "boolean execute(String sql, int autoGeneratedKeys) throws java.sql.SQLException {return super.execute($1, $2);}")
    , EXECUTE_WITH_SIGNALS("execute", "(Ljava/lang/String;[I)Z", "boolean execute(String sql, int columnIndexes[]) throws java.sql.SQLException {return super.execute($1, $2);}")
    , EXECUTE_WITH_SIGNALS_NAME("execute", "(Ljava/lang/String;[Ljava/lang/String;)Z", "boolean execute(String sql, String columnNames[]) throws java.sql.SQLException {return super.execute($1, $2);}");


    private final String name;
    private final String signature;
    private final String shell;

    private MethodId(String name, String signature, String shell) {
        this.name = name;
        this.signature = signature;
        this.shell = shell;
    }

    public static MethodId findMethodId(String name, String signature) {

        for (MethodId methodId : MethodId.values()) {
            if (methodId.name.equals(name) && methodId.signature.equals(signature)) return methodId;
        }
        return null;
    }

    public String getSignature() {
        return signature;
    }


    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return new StringBuilder()
                .append(" ( ")
                .append(" name : " + name)
                .append(" signature : " + signature)
                .append(" ) ")
                .toString();
    }

    public String getShell() {
        return this.shell;
    }
}
